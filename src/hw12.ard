\import Algebra.Meta
\import Equiv (Map, Retraction)
\import Equiv.Univalence
\import lect11 (funExt)
\import lect12 \hiding (Equiv)
\import Utils \hiding (transport,Or,inl,inr)

-- 1. Докажите, что если A : \Prop, то Trunc A эквивалентен A.

\func trunc-prop {A : \Prop} : Trunc A <-> A =>
  (
    \case __ \with { | trunc a => a },
    trunc
  )

-- 2. Докажите следующий закон де Моргана.

\func deMorgan (A B C : \Prop) : (\Sigma A (B `Or` C)) <-> ((\Sigma A B) `Or` (\Sigma A C)) =>
  (
    \case __ \with {
      | (a, bc) => \case bc \with {
        | inl b => inl (a, b)
        | inr c => inr (a, c)
      }
    },
    \case __ \with {
      | inl (a, b) => (a, inl b)
      | inr (a, c) => (a, inr c)
    }
  )

-- 3. Определите элиминатор для Or через Or-rec, не используя паттерн матчинг на Or.

\func Or-elim {A B : \Prop} (C : Or A B -> \Prop)
              (f : \Pi (x : A) -> C (inl x)) (g : \Pi (y : B) -> C (inr y))
              (p : A `Or` B) : C p =>
  \let
    | p2_c => Or-rec {A} {B} {\Sigma (ab : Or A B) (C ab)} (\lam a => (inl a, f a)) (\lam b => (inr b, g b)) p
    | p2 => p2_c.1
    | c2 => p2_c.2
    | p2=p => Path.inProp p2 p
    | c => transport C p2=p c2
  \in
    c

-- нужно использовать унивалентность
-- 4. Докажите, что тип утверждений является множеством.

-- univalence
-- Equiv.equals

\func prop-isSet : isSet \Prop =>
  \lam p1 p2 =>
      \lam q1 q2 =>
          \let
            | e_p => univalence {p1} {p2}
            | equal=>equiv => Equiv.f {e_p}
            | equiv=>equal => Equiv.ret {e_p}
            | e1 => equal=>equiv q1
            | e2 => equal=>equiv q2
            | e1f=e2f => funExt {p1} (\lam _ => p2) (Equiv.f {e1}) (Equiv.f {e2}) (\lam _ => Path.inProp _ _)
            | e1=e2 => Equiv.equals {p1} {p2} {e1} {e2} e1f=e2f
            | y => pmap equiv=>equal e1=e2
            | e1=q1 => Equiv.ret_f {e_p} q1
            | e2=q2 => Equiv.ret_f {e_p} q2
          \in
            equation
  \where {
    \open Equiv
  }

-- 5. Докажите, что функции Prop1-to-Prop2 и Prop2-to-Prop1 взаимно обратны и, как следствие, что Prop1 = Prop2.

-- Можно сделать только одно из упражнений 6a,6b на выбор.
-- 6a. Тип С называется когенератором, если для любых множеств A и B и любых функция f,g : A -> B верно, что если h `o` f = h `o` g для всех h : B -> C, то f = g.
--     Докажите, что \Prop является когенератором.

\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func isCogenerator (C : \Type) => \Pi {A B : \Set} (f g : A -> B) (p : \Pi (h : B -> C) -> h `o` f = h `o` g) -> f = g

\func PropIsCogenerator : isCogenerator \Prop => {?}

-- на подумать
-- 6b. Тип X называется инъективным, если для любой функции f : A -> X и любой инъекции i : A -> B сущесвует функция l : B -> X такая, что l `o` i = f.
--     Докажите, что \Prop инъективен.

\func isInj {A B : \Type} (f : A -> B) => \Pi (x y : A) -> f x = f y -> x = y

\func isInjective (X : \Type) => \Pi {A B : \Type} (f : A -> X) (i : A -> B) (p : isInj i) -> \Sigma (l : B -> X) (l `o` i = f)

\func Prop-isInjective : isInjective \Prop => {?}

-- техническая
-- Можно сделать только одно из упражнений 7a,7b на выбор.
-- 7a. Докажите, что (Bool = Bool) = Bool.

\func BoolAut : (Bool = Bool) = Bool => {?}

-- 7b. Докажите, что (n+m)-элементное множество равно размеченному объединению n- и m-элементных множеств.
