\import Algebra.Meta
\import Logic.Meta
\import lect09 (Decide)
\import lect11
\import Utils \hiding (<=-refl)

-- 1,3,4,5,7 - лёгкие
-- 2 - на подумать
-- 8,9,10,11 - доказать эквивалентность множеств, не так легко

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f) =>
  \lam x y r => p x y (q (f x) (f y) r)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f =>
  \lam x y r => p x y (pmap g r)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func isMultipleOf3Or5 (n : Nat) : \Type => mod3 n Nat.* mod5 n = 0

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n) =>
  \lam p q => helper (mod3 n Nat.* mod5 n) p q
  \where {
    \func helper (k : Nat) (p q : k = 0) : p = q \elim k, p
      -- todo
      | k, idp => {?}
--    \func helper2 (k : Nat) (p q : k = 0) : p = q \elim k
--      -- todo
--      | 0 => retract-isProp {0 = 0} Unit-isProp (\lam _ => ()) (\lam _ => idp) (\lam r => {?}) p q
--      | suc k => contradiction
  }

-- как это доказать ...
-- кажется что к этому сводятся 2 и 6
\func my (p q : 0 = 0) : p = q => {?}

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => {?}

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A) =>
  (
    \case __ \with {
      (a, p) => (\lam x y => sym (p x) *> p y, a)
    },
    \case __ \with {
      (p, a) => (a, \lam a' => p a a')
    }
  )

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Either A B)) : Empty =>
  \let
    | q => p Unit-isProp Unit-isProp
    | q2 => q (Either.inl ()) (Either.inr ())
  \in
    contradiction

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) => helper
  \where {
    \func helper {n m : Nat} (p1 p2 : LessOrEq n m) : p1 = p2 \elim n, m, p1, p2
      | 0, m, z<=n, z<=n => idp
      | suc n, suc m, s<=s p1, s<=s p2 => pmap s<=s (helper p1 p2)
  }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

-- todo
\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => T (x < y)) n m) => {?}

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty =>
  \let
    | q => p 0 0
    | c => q (refl idp) (inc z<=n)
  \in
    contradiction

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A =>
  \lam a1 a2 => p a1 a2 (q (f a1) (f a2))

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  -- todo
  => \lam x y => retract-isProp {x = y} Unit-isProp (\lam z => ()) (\lam z => {?}) {?}

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

-- todo
\func or-isSet {A B : \Type} (p : isSet A) (q : isSet B) : isSet (Or A B) =>
  \lam ab1 ab2 =>
      \lam p1 p2 => \case \elim ab1, \elim ab2, \elim p1, \elim p2 \with {
        | inl a1, inl a2, p1, p2 =>
          \let
            | x => p a1 a2 {?}
          \in
--            path (\lam i => {?})
--            retract-isProp {inl a1 = inl a2} {A} {?} {?} {?} (inl a1) (inl a2)
            {?}
        | inr b1, inr b2, p1, p2 => {?}
      }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (p : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x) => {?}

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => {?}

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}