-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (x y z : Nat) : Nat => y
\func apply (x : Nat -> Nat) (y : Nat) : Nat => x y
\func compose (f : Nat -> Nat) (g : Nat -> Nat) (x : Nat) : Nat => f (g x)
\func flip (f : Nat -> Nat -> Nat) (x : Nat) (y : Nat) : Nat => f y x

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 5 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 6 f5 => f1
\func f6 => f4

--\func test => (Nat -> Nat -> Nat) Nat ((Nat -> Nat) -> Nat -> Int) Nat (Nat -> Nat -> Nat) Nat
\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}
\func if {A : \Type} (f : Bool) (t : A) (e : A) : A \elim f
  | true => t
  | false => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => if x true y

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat
  | x, 0 => 1
  | x, 1 => x
  -- x ^ (y + 1) = x * (x ^ y)
  | x, suc y => x * (x ^ y)

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x => (suc x) * (fac x)

-- 7. Определите mod и gcd.

--\func mod (x y : Nat) : Nat => if (x < y) x ((x - y) `mod` y)
\func mod (x y : Nat) : Nat => x - (x `div` y) * y
--\func mod (x y : Nat) : Nat
--  | 0, y => 0
--  | suc x, y => (x `mod` y) ...

\func modTest1 : mod 10 2 = 0 => idp
\func modTest2 : mod 10 3 = 1 => idp
\func modTest3 : mod 10 4 = 2 => idp
\func modTest4 : mod 10 6 = 4 => idp

-- gcd(x, y) = gcd(x % y, y)
\func gcd2 (s x y : Nat) : Nat
  | 0, _, _ => 0  -- unreacheable
  | _, x, 0 => x
  | suc s, x, y => if (x < y) (gcd2 s y x) (gcd2 s y (x `mod` y))
\func gcd (x y : Nat) : Nat => gcd2 (2 * (x + y)) x y

\func gcdTest1 : gcd 0 0 = 0 => idp
\func gcdTest2 : gcd 0 1 = 1 => idp
\func gcdTest3 : gcd 1 0 = 1 => idp
\func gcdTest4 : gcd 1 1 = 1 => idp
\func gcdTest5 : gcd 3 4 = 1 => idp
\func gcdTest6 : gcd 6 9 = 3 => idp
\func gcdTest7 : gcd 9 6 = 3 => idp
\func gcdTest8 : gcd 8 12 = 4 => idp
\func gcdTest9 : gcd 25 35 = 5 => idp
