\import Utils \hiding (<=-refl, J)
\import lect04 (+-comm)
\import lect05
\open Nat(+,*)

-- 1. Докажите pmap при помощи паттерн матчинга с idp.

\func pmap {A B : \Type} (f : A -> B) {a a' : A} (p : a = a') : f a = f a' \elim p
  | idp => idp

-- Optional:
-- 2. У оператора J есть другая форма, которую мы будем называть Jalt. Докажите, что J и Jalt эквивалентны, то есть выразите одно через другое и наоборот.

-- Выразите Jalt через J. Можно пользоваться только J, idp и всем, что через них выражается.

\func Jalt {A : \Type} (B : \Pi (a a' : A) -> a = a' -> \Type)
           (b : \Pi (a : A) -> B a a idp)
           {a a' : A} (p : a = a') : B a a' p => J (B a) (b a) p

-- Выразите J через Jalt. Можно пользоваться только Jalt, idp и всем, что через них выражается.
-- Hint:
-- a. Выразите transport через Jalt.
-- b. Докажите, что тип \Sigma (x : A) (a = x) одноэлементный, то есть, что для любого p : \Sigma (x : A) (a = x) верно, что (x,idp) = p.
-- c. Используя эти две конструкции, легко определить J.

\func transport'' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a'
  -- todo нужно через Jalt
  \elim p | idp => b

\func sigma-contr {A : \Type} {a : A} (p : \Sigma (x : A) (a = x)) : (a, idp) = {\Sigma (x : A) (a = x)} p => sigma-contr-impl p.1 p.2
\func sigma-contr-impl {A : \Type} {a : A} (x : A) (p : a = x) : (a, idp) = {\Sigma (x : A) (a = x)} (x, p) \elim x, p
  | x, idp => idp

\func J' {A : \Type} {a : A} (B : \Pi (a' : A) -> a = a' -> \Type)
         (b : B a idp)
         {a' : A} (p : a = a') : B a' p
  => transport'' (\lam (xq : \Sigma (x : A) (a = x)) => B xq.1 xq.2) (sigma-contr-impl a' p) b

-- 3. Докажите, что vnil является нейтральным элементом для v++.

\func vnil-rightId {A : \Type} {n : Nat} (xs : Vec A n) : transport (Vec A) (+-comm 0 n) (xs v++ vnil) = xs \elim n, xs
  | 0, vnil => idp
  | suc n, vcons x xs => aux x (xs v++ vnil) xs (+-comm 0 n) (vnil-rightId xs)
  \where {
    \func aux
      {A : \Type} {i j : Nat}
      (x : A)
      (as : Vec A i) (bs : Vec A j)
      (p : i = j)
      (t : transport (Vec A) p as = bs)
      : transport (Vec A) (Utils.pmap suc p) (vcons x as) = vcons x bs
    \elim p
      | idp => pmap (vcons x) t
  }

-- 4. Определите предикат принадлежности элемента списку.

\data In {A : \Type} (a : A) (xs : List A) \elim xs
  | cons x xs => inHead (x = a)
  | cons x xs => inTail (In a xs)

-- Optional:
-- 5. Докажите эквивалентность четырех различных определений LessOrEq: lessOrEq, lessOrEq', LessOrEq и LessOrEq'.

-- 6. Определите рефлексивное транзитивное замыкание отношения.
--    То есть ReflTransClosure R -- это минимальное рефлексивное и транзитивное отношение, содержащее R.

\data ReflTransClosure {A : \Type} (R : A -> A -> \Type) (x y : A)
  | self (R x y)
  | refl (x = y)
  | trans (z : A) (ReflTransClosure R x z) (ReflTransClosure R z y)

-- 7. Докажите, что если R уже рекфлексивно и транзитивно, то ReflTransClosure R эквивалентно R.

\func ReflTransClosure-lem {A : \Type}
                           (R : A -> A -> \Type)
                           (refl : \Pi (x : A) -> R x x)
                           (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
  : \Pi (x y : A) -> R x y <-> ReflTransClosure R x y
  => \lam (x y : A) => ((\lam (r : R x y) => self r), helper R refl trans x y)
  \where {
    \func helper {A : \Type}
                 (R : A -> A -> \Type)
                 (refl : \Pi (x : A) -> R x x)
                 (trans : \Pi (x y z : A) -> R x y -> R y z -> R x z)
                 (x y : A)
                 (r : ReflTransClosure R x y) : R x y
    \elim r
      | self rxy => rxy
      | ReflTransClosure.refl rxx => \case \elim x, rxx \with { | x, idp => refl x }
      | ReflTransClosure.trans z rxz rzy => trans x z y (helper R refl trans x z rxz) (helper R refl trans z y rzy)
  }

-- Note: \elim
-- \case x \as x, f true \as ft, idp : f true = ft, f false \return f (f (f x)) = f x \with
-- => \case \elim x, f true \as ft, idp : f true = ft, f false \return f (f (f x)) = f x \with
-- => \case \elim x, f true \as ft, idp : f true = ft, f false \with {

-- 8. Определите предикат Sublist xs ys на списках, означающий "список xs является подсписком ys".
\data SubList {A : \Type} (xs ys : List A) \elim xs, ys
  | nil, _ => SubList1
  | cons x xs, cons y ys => SubList2 (x = y) (SubList xs ys)
  | xs, cons y ys => SubList3 (SubList xs ys)

-- 9. Докажите, что Sublist (filter p xs) xs для любых p и xs.
\func filter-sublist {A : \Type} (p : A -> Bool) (xs : List A) : SubList (filter p xs) xs \elim xs
  | nil => SubList1
  | cons x xs => \case p x \as a
  \return SubList
      (\case a \with {
        | true => cons x (filter p xs)
        | false => filter p xs
      })
      (cons x xs)
  \with {
    | true => SubList2 idp (filter-sublist p xs)
    | false => SubList3 (filter-sublist p xs)
  }

-- 10. Определите filter через if, а не через \case.
--     Докажите для этой версии filter лемму filter-lem.

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons x xs => if (p x) (cons x (filter' p xs)) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) Nat.<= length xs \elim xs
  | nil => Nat.zero<=_
  | cons x xs =>
    \case p x \as a
    \return length (if a (cons x (filter' p xs)) (filter' p xs)) Nat.<= suc (length xs)
    \with {
      | true => Nat.suc<=suc (filter-lem p xs)
      | false => <=-step-lem (filter-lem p xs)
    }

-- 11. Закончите определение функции \func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x из лекции.
\func BoolFuncLem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x
  => \case f true \as ft, idp : f true = ft, f false \as ff, idp : f false = ff, \elim x \with {
    | true, p, _, q, true => pmap (\lam z => f (f z)) p *> pmap f p
    | true, p, true, q, false => pmap (\lam z => f (f z)) q *> pmap f p *> p *> sym q
    | false, p, true, q, true => pmap (\lam z => f (f z)) p *> pmap f q *> p *> sym p
    | false, p, true, q, false => pmap (\lam z => f (f z)) q *> pmap f p *> q *> sym q
    | false, p, false, q, true => pmap (\lam z => f (f z)) p *> pmap f q *> q *> sym p
    | _, p, false, q, false => pmap (\lam z => f (f z)) q *> pmap f q
  }

-- Optional:
-- 12. Парадокс Рассела показывает, что не существует множества всех множеств.
-- Если такое множеств существует, то мы можем определить множество B, состоящее из множеств, не содержащих себя.
-- Тогда B принадлежит себе тогда и только тогда, когда оно себе не принадлежит.
-- Отсюда следует противоречии.
-- Теорема Кантора утверждает, что не сущесвует множества X с сюръекцией из X в множество подмножеств X.
-- Ее доказательство также конструирует утверждение, которое верно тогда и только тогда, когда оно ложно.
-- Верно, что в общем случае существование такого утверждения влечет противоречие.
-- Это легко доказать при помощи исключенного третьего, но утверждение верно и без него.
-- Докажите этот факт.
\func contrProp {A : \Type} (p : A -> Not A) (q : Not A -> A) : Empty =>
  \let | a => q (\lam a' => p a' a')
  \in p a a
