-- 1. Напишите функцию lookup, которая принимает List A и натуральное число и возвращает элемент по заданому индексу.
--    В общем случае эту функцию определить невозможно, т.к. индекс может быть больше, чем число элементов в списке.
--    Поэтому эта функция должна дополнительно еще принимать доказательство того, что индекс находится в допустимых границах, в виде T (n < length xs).

\func \infix 4 < (x y : Nat) : Bool
  | 0, 0 => false
  | 0, suc y => true
  | suc x, 0 => false
  | suc x, suc y => x < y

\func lookup {A : \Type} (xs : List A) (n : Nat) (p : T (n < length xs)) : A
  | nil, 0, ()
  | cons a xs, 0, p => a
  | cons a xs, suc n, p => lookup xs n p

-- 2. Реализуйте аналоги функции replicate для vec и Vec (эта функция создает список заданной длины, состоящий из повторений данного элемента).
\func replicate1 {A : \Type} (a : A) (n : Nat) : vec A n \elim n
  | 0 => ()
  | suc n => (a, replicate1 a n)

\func replicate2 {A : \Type} (a : A) (n : Nat) : Vec A n \elim n
  | 0 => vnil
  | suc n => vcons a (replicate2 a n)

-- 3. Реализуйте аналоги функции map для vec и Vec.
\func map1 {A B : \Type} (f : A -> B) (n : Nat) (xs : vec A n) : vec B n \elim n, xs
  | 0, xs => xs
  | suc n, xs => (f xs.1, map1 f n xs.2)

\func map2 {A B : \Type} (f : A -> B) {n : Nat} (xs : Vec A n) : Vec B n \elim n, xs
  | 0, vnil => vnil
  | suc n, vcons a xs => vcons (f a) (map2 f xs)

-- 4. Реализуйте аналоги функции zipWith для vec и Vec.
--    Функция должна принимать вектора одинаковой длины.
\func zipWith1 {A B : \Type} (n : Nat) (as : vec A n) (bs : vec B n) : vec (\Sigma A B) n
  | 0, as, bs => ()
  | suc n, as, bs => ((as.1, bs.1), zipWith1 n as.2 bs.2)

\func zipWith2 {A B : \Type} {n : Nat} (as : Vec A n) (bs : Vec B n) : Vec (\Sigma A B) n \elim n, as, bs
  | 0, vnil, vnil => vnil
  | suc n, vcons a as, vcons b bs => vcons (a, b) (zipWith2 as bs)

-- 5. Определите конгруэнтность для функций двух аргументов через transport.
--    Можно использовать любые функции, определенные через transport.

\func pmap2_helper1 {A B C : \Type} (f : A -> B -> C) {a a' : A} (p : a = a') {b b' : B} (q : b = b') : f a b = f a' b' =>
  transport (\lam x => f a b = f a' x) q (transport (\lam x => f a b = f x b) p idp)

-- 6. Докажите, что transport выражается через pmap и repl и наоборот.

-- repl говорит, что если у нас есть два равных типа, то у нас есть функция из одного во второй.
-- Определите repl через transport.

\func repl {A B : \Type} (p : A = B) (a : A) : B => (transport (\lam a => a) p) a

-- Определите transport через repl и pmap.

\func transport' {A : \Type} (B : A -> \Type) {a a' : A} (p : a = a') (b : B a) : B a' => repl (pmap B p) b

-- 7. Определите тип CTree A n полных бинарных деревьев высоты ровно n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data CTree (A : \Type) (n : Nat) \elim n
  | 0 => ctnil
  | suc n => ctnode (CTree A n) (CTree A n)

-- 8. Определите тип Tree A n бинарных деревьев высоты не больше n, которые хранят элементы только во внутренних узлах, но не в листьях.
--    Высота листа равна 0.

\data Tree (A : \Type) (n : Nat) \elim n
  | 0 => tnil
  | n => tnode1 (CTree A n)
  | suc n => tnode2 (Tree A n)

-- определите функцию, возвращающую высоту дерева.

\func toFin (n : Nat) : Fin (suc n)
  | 0 => fzero
  | suc n => fsuc (toFin n)

\func convertFin {n : Nat} (x : Fin n) : Fin (suc n) \elim n, x
  | suc n, fzero => fzero
  | suc n, fsuc x => fsuc (convertFin x)

\func height {A : \Type} {n : Nat} (t : Tree A n) : Fin (suc n) \elim n, t
  | 0, tnil => fzero
  | 0, tnode1 c => fzero
  | suc n, tnode1 c => toFin (suc n)
  | suc n, tnode2 t => convertFin (height t)

-- 9. Чему равно fileTest (в нормальной форме)? Докажите это.
\func fileTestEq : fileTest = (17, 8, 13, 55, 18, 21) => idp

-- 10. Чему равно M5.t''' (в нормальной форме)? Докажите это.

\import Utils
\import lect03 \hiding (Vec,vnil,vcons)

-- Optional task
-- 11. Функции Fin n -> A соответствуют спискам элементов A длины n.
--     Функция, преобразующая Vec A n в Fin n -> A, была реализована на лекции.
--     Реализуйте обратную функцию.

\func coin {A : \Type} {n : Nat} (f : Fin n -> A) : Vec A n => {?}

-- Optional task
-- 12. Определите тип матриц и ряд функций над ними.

\func Mat (A : \Type) (n m : Nat) : \Type => {?}

-- диагональная матрица с элементами e на диагонали и z на остальных позициях.

\func diag {A : \Type} (z e : A) (n : Nat) : Mat A n n => {?}

-- транспонирование матриц

\func transpose {A : \Type} {n m : Nat} (M : Mat A n m) : Mat A m n => {?}

-- сложение матриц

\func matAdd {A : \Type} (add : A -> A -> A) (n m : Nat) (M N : Mat A n m) : Mat A n m => {?}

-- умножение матриц

-- z ─ нейтральный элемент по сложению.
\func matMul {A : \Type} (z : A) (add mul : A -> A -> A) (n m k : Nat) (M : Mat A n m) (N : Mat A m k) : Mat A n k => {?}
