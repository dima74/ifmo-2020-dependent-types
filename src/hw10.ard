\import Algebra.Meta
\import Logic.Meta
\import Meta
\import Paths (pmap2)
\import Paths.Meta
\import Utils
\import lect04 (funExt)
\import lect09 (Decide, no, yes)
\import lect10

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} (f : A -> B) : F A -> F B
  | fmap-id {A : \Type} (y : F A) : fmap (\lam (x : A) => x) y = y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A)
  : fmap (\lam x => g (f x)) y = fmap g (fmap f y)

\class Monad \extends Functor
  | return {A : \Type} : A -> F A
  | \infixl 1 >>= {A B : \Type} : F A -> (A -> F B) -> F B
  | >>=-left {A B : \Type} (a : A) (k : A -> F B) : (return a >>= k) = k a
  | >>=-right {A : \Type} (m : F A) : (m >>= return) = m
  | >>=-assoc {A B C : \Type} (m : F A) (k : A -> F B) (l : B -> F C) : ((m >>= k) >>= l) = (m >>= (\lam a => k a >>= l))
  | fmap => {?}
  | fmap-id => {?}
  | fmap-comp => {?}

\instance MaybeMonad : Monad Maybe
  | return => just
  | >>= m k => maybe nothing k m
  | >>=-left => {?}
  | >>=-right => {?}
  | >>=-assoc => {?}

-- 1. Закончите определение \instance Monad для Term.

\func termMap {A B : \Type} (f : A -> B) (t : Term A) : Term B \elim t
  | var v => var (f v)
  | unit => unit
  | app t1 t2 => app (termMap f t1) (termMap f t2)
  | lam t => lam (termMap (maybe nothing (\lam x => just (f x))) t)

{-
-- это некорректное определение termMap just
\func lift {A : \Type} (t : Term A) : Term (Maybe A) \elim t
  | var v => var (just v)
  | unit => unit
  | app t1 t2 => app (termMap just t1) (termMap just t2)
  | lam t => lam (termMap just t)
-}

--\func liftM {A B : \Type} (k : A -> Term B) (m : Maybe A) : Term (Maybe B)
--  => maybe (var nothing) (\lam a => termMap just (k a)) m
\func liftM {A B : \Type} (k : A -> Term B) (m : Maybe A) : Term (Maybe B) \elim m
  | nothing => var nothing
  | just a => termMap just (k a)

\instance TermMonad : Monad Term
  | return => var
  | \infixl 1 >>= {A B : \Type} (t : Term A) (k : A -> Term B) : Term B \elim t {
    | var v => k v
    | unit => unit
    | app t1 t2 => app (t1 >>= k) (t2 >>= k)
    | lam t => lam (t >>= liftM k)
  }

--  | >>=-left {A B : \Type} (a : A) (k : A -> F B) : (return a >>= k) = k a
  | >>=-left {A B : \Type} (a : A) (k : A -> Term B) => idp

--  | >>=-right {A : \Type} (m : F A) : (m >>= return) = m
  | >>=-right {A : \Type} (t : Term A) => >>=-right2 t

--  | >>=-assoc {A B C : \Type} (m : F A) (k : A -> F B) (l : B -> F C) : ((m >>= k) >>= l) = (m >>= (\lam a => k a >>= l))
  | >>=-assoc {A B C : \Type} (t : Term A) (k : A -> Term B) (l : B -> Term C) => >>=-assoc2 t k l

  \where {
    \func >>=-right2 {A : \Type} (t : Term A) : (t >>= var) = t \elim t
      | var v => idp
      | unit => idp
      | app t1 t2 => pmap2 app (>>=-right2 t1) (>>=-right2 t2)
      | lam t =>
        \let
          | p => >>=-right2 t
          | q => >>=-right-helper1 {A}
        \in
          pmap lam (>>=-right-helper2 t var (liftM var) p q)
    \func >>=-right-helper1 {A : \Type} : var = liftM {A} var =>
      funExt (\lam _ => Term (Maybe A)) {var} {liftM var} (\case \elim __ \with {
        | nothing => idp
        | just a => idp
      })
    \func >>=-right-helper2 {A : \Type}
                            (t : Term (Maybe A))
                            (f1 f2 : Maybe A -> Term (Maybe A))
                            (p : (t >>= f1) = t)
                            (q : f1 = f2)
      : (t >>= f2) = t
    \elim q
      | idp => p

    \func >>=-assoc2 {A B C : \Type} (t : Term A) (k : A -> Term B) (l : B -> Term C)
      : ((t >>= k) >>= l) = (t >>= (\lam a => k a >>= l))
    \elim t
      | var v => idp
      | unit => idp
      | app t1 t2 => pmap2 app (>>=-assoc2 t1 k l) (>>=-assoc2 t2 k l)
      | lam t =>
        \let
          | p => >>=-assoc2 t (liftM k) (liftM l)
        \in
          pmap lam (>>=-assoc-helper1 t k l (>>=-assoc-helper2 k l) p)
    \func >>=-assoc-helper1 {A B C : \Type}
                            (t : Term (Maybe A))
                            (k : A -> Term B)
                            (l : B -> Term C)
                            {f1 f2 : Maybe A -> Term (Maybe C)}
                            (q : f1 = f2)
                            (p : (t >>= liftM k >>= liftM l) = (t >>= f2))
      : (t >>= liftM k >>= liftM l) = (t >>= f1)
    \elim q
      | idp => p
    \func >>=-assoc-helper2 {A B C : \Type} (k : A -> Term B) (l : B -> Term C)
      : liftM (\lam (a : A) => k a >>= l) = (\lam (a : Maybe A) => liftM k a >>= liftM l)
      => funExt (\lam _ => Term (Maybe C)) (>>=-assoc-helper3 k l)
    \func >>=-assoc-helper3 {A B C : \Type} (k : A -> Term B) (l : B -> Term C) (a : Maybe A)
      : liftM (\lam a => k a >>= l) a = (liftM k a >>= liftM l)
    \elim a
      | nothing => idp
      -- todo
      | just a => {?}
  }

-- 2. Определите отношение многошаговой редукции на Term.

\data Red {V : \Type} (t s : Term V)
  | red0 (t = s)
  | redN (r : Term V) (Red1 t r) (Red r s)


-- 3. Стратегия редукции -- это функция, которая каждому терму сопоставляет либо некоторый терм, к которому он редуцируется за 1 шаг, либо доказательство, что таких термов нет.
--    Определите любую стратегию редукции.

\func strategy {V : \Type} (t : Term V) : Decide (\Sigma (s : Term V) (Red1 t s)) \elim t
  | var v => no (\lam a => \case a.2 \with {})
  | unit => no (\lam a => \case a.2 \with {})
  -- todo
  | app t1 t2 => {?}
  | lam t => \case strategy t \with {
    | yes a => yes (lam a.1, lamRed a.2)
    | no n => no (\lam a => helper t a.1 a.2 n)
  }
  \where {
    \func helper {V : \Type}
                 (t : Term (Maybe V))
                 (s : Term V)
                 (r : (Red1 (lam t) s))
                 (n : \Sigma (s : Term (Maybe V)) (Red1 t s) -> Empty)
      : Empty
    \elim s, r
      | lam s, lamRed r => n (s, r)
  }

-- 4. Докажите, что подтермы достижимого терма достижимы.

-- если (t s) достижим, то t достижим
\func appAccLeft {V : \Type} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 t \elim a
  | acc a => acc (\lam t' t=>t' => appAccLeft {V} {t'} {s} (a (app t' s) (appLeft t=>t' idp)))

\func appAccRight {V : \Type} {t s : Term V} (a : Acc Red1 (app t s)) : Acc Red1 s \elim a
  | acc a => acc (\lam s' s=>s' => appAccRight {V} {t} {s'} (a (app t s') (appRight idp s=>s')))

\func subLamAcc {V : \Type} {t : Term (Maybe V)} (a : Acc Red1 (lam t)) : Acc Red1 t \elim a
  | acc a => acc (\lam t' t=>t' => subLamAcc {V} {t'} (a (lam t') (lamRed t=>t')))

-- 5. Докажите следующую обобщенную лемму о подстановке и выведите из нее обычную версию: если Г, x : A |- b : B и Г |- a : A, то Г |- b[a/x] : B.

\func substLem {U V : \Type} (ctx : U -> Type) (b : Term U) (B : Type) (h : hasType ctx b B)
               (ctx' : V -> Type) (a : U -> Term V) (h' : \Pi (u : U) -> hasType ctx' (a u) (ctx u))
  : hasType ctx' (b >>= a) B
  => {?}

\func substLem1 => {?}

-- 6. Докажите, что если Г |- a : A и Red a a', то Г |- a' : A

\func redLem {V : \Type} {ctx : V -> Type} {a a' : Term V} (r : Red a a') {A : Type} (h : hasType ctx a A)
  : hasType ctx a' A
  => {?}
